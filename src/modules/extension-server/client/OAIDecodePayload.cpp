/**
 * RESP.app Extension server
 * RESP.app Extension Server API allows you to extend RESP.app with your custom data formatters
 *
 * The version of the OpenAPI document: 2022.0-preview1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDecodePayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace RespExtServer {

OAIDecodePayload::OAIDecodePayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDecodePayload::OAIDecodePayload() {
    this->initializeModel();
}

OAIDecodePayload::~OAIDecodePayload() {}

void OAIDecodePayload::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_redis_key_name_isSet = false;
    m_redis_key_name_isValid = false;

    m_redis_key_type_isSet = false;
    m_redis_key_type_isValid = false;
}

void OAIDecodePayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDecodePayload::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::RespExtServer::fromJsonValue(data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_redis_key_name_isValid = ::RespExtServer::fromJsonValue(redis_key_name, json[QString("redis-key-name")]);
    m_redis_key_name_isSet = !json[QString("redis-key-name")].isNull() && m_redis_key_name_isValid;

    m_redis_key_type_isValid = ::RespExtServer::fromJsonValue(redis_key_type, json[QString("redis-key-type")]);
    m_redis_key_type_isSet = !json[QString("redis-key-type")].isNull() && m_redis_key_type_isValid;
}

QString OAIDecodePayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDecodePayload::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::RespExtServer::toJsonValue(data));
    }
    if (m_redis_key_name_isSet) {
        obj.insert(QString("redis-key-name"), ::RespExtServer::toJsonValue(redis_key_name));
    }
    if (m_redis_key_type_isSet) {
        obj.insert(QString("redis-key-type"), ::RespExtServer::toJsonValue(redis_key_type));
    }
    return obj;
}

QString OAIDecodePayload::getData() const {
    return data;
}
void OAIDecodePayload::setData(const QString &data) {
    this->data = data;
    this->m_data_isSet = true;
}

bool OAIDecodePayload::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDecodePayload::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIDecodePayload::getRedisKeyName() const {
    return redis_key_name;
}
void OAIDecodePayload::setRedisKeyName(const QString &redis_key_name) {
    this->redis_key_name = redis_key_name;
    this->m_redis_key_name_isSet = true;
}

bool OAIDecodePayload::is_redis_key_name_Set() const{
    return m_redis_key_name_isSet;
}

bool OAIDecodePayload::is_redis_key_name_Valid() const{
    return m_redis_key_name_isValid;
}

QString OAIDecodePayload::getRedisKeyType() const {
    return redis_key_type;
}
void OAIDecodePayload::setRedisKeyType(const QString &redis_key_type) {
    this->redis_key_type = redis_key_type;
    this->m_redis_key_type_isSet = true;
}

bool OAIDecodePayload::is_redis_key_type_Set() const{
    return m_redis_key_type_isSet;
}

bool OAIDecodePayload::is_redis_key_type_Valid() const{
    return m_redis_key_type_isValid;
}

bool OAIDecodePayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redis_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redis_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDecodePayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace RespExtServer
