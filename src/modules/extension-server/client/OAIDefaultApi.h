/**
 * RESP.app Extension server
 * RESP.app Extension Server API allows you to extend RESP.app with your custom data formatters
 *
 * The version of the OpenAPI document: 2022.0-preview1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataFormatter.h"
#include "OAIDecodePayload.h"
#include "OAIEncodePayload.h"
#include "OAIInline_response_400.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace RespExtServer {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void dataFormattersGet();

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_decode_payload OAIDecodePayload [optional]
    */
    void dataFormattersIdDecodePost(const QString &id, const ::RespExtServer::OptionalParam<OAIDecodePayload> &oai_decode_payload = ::RespExtServer::OptionalParam<OAIDecodePayload>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_encode_payload OAIEncodePayload [optional]
    */
    void dataFormattersIdEncodePost(const QString &id, const ::RespExtServer::OptionalParam<OAIEncodePayload> &oai_encode_payload = ::RespExtServer::OptionalParam<OAIEncodePayload>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataFormattersGetCallback(OAIHttpRequestWorker *worker);
    void dataFormattersIdDecodePostCallback(OAIHttpRequestWorker *worker);
    void dataFormattersIdEncodePostCallback(OAIHttpRequestWorker *worker);

signals:

    void dataFormattersGetSignal(QList<OAIDataFormatter> summary);
    void dataFormattersIdDecodePostSignal(QString summary);
    void dataFormattersIdEncodePostSignal(QString summary);

    void dataFormattersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDataFormatter> summary);
    void dataFormattersIdDecodePostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void dataFormattersIdEncodePostSignalFull(OAIHttpRequestWorker *worker, QString summary);

    void dataFormattersGetSignalE(QList<OAIDataFormatter> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFormattersIdDecodePostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFormattersIdEncodePostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);

    void dataFormattersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFormattersIdDecodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFormattersIdEncodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace RespExtServer
#endif
