/**
 * RESP.app Extension server
 * RESP.app Extension Server API allows you to extend RESP.app with your custom data formatters
 *
 * The version of the OpenAPI document: 2022.0-preview1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFormatter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace RespExtServer {

OAIDataFormatter::OAIDataFormatter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFormatter::OAIDataFormatter() {
    this->initializeModel();
}

OAIDataFormatter::~OAIDataFormatter() {}

void OAIDataFormatter::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_key_types_isSet = false;
    m_key_types_isValid = false;

    m_magic_header_isSet = false;
    m_magic_header_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;
}

void OAIDataFormatter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFormatter::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::RespExtServer::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::RespExtServer::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_key_types_isValid = ::RespExtServer::fromJsonValue(key_types, json[QString("key-types")]);
    m_key_types_isSet = !json[QString("key-types")].isNull() && m_key_types_isValid;

    m_magic_header_isValid = ::RespExtServer::fromJsonValue(magic_header, json[QString("magic-header")]);
    m_magic_header_isSet = !json[QString("magic-header")].isNull() && m_magic_header_isValid;

    m_read_only_isValid = ::RespExtServer::fromJsonValue(read_only, json[QString("read-only")]);
    m_read_only_isSet = !json[QString("read-only")].isNull() && m_read_only_isValid;
}

QString OAIDataFormatter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFormatter::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::RespExtServer::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::RespExtServer::toJsonValue(name));
    }
    if (m_key_types_isSet) {
        obj.insert(QString("key-types"), ::RespExtServer::toJsonValue(key_types));
    }
    if (m_magic_header_isSet) {
        obj.insert(QString("magic-header"), ::RespExtServer::toJsonValue(magic_header));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("read-only"), ::RespExtServer::toJsonValue(read_only));
    }
    return obj;
}

QString OAIDataFormatter::getId() const {
    return id;
}
void OAIDataFormatter::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIDataFormatter::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataFormatter::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDataFormatter::getName() const {
    return name;
}
void OAIDataFormatter::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIDataFormatter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataFormatter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataFormatter::getKeyTypes() const {
    return key_types;
}
void OAIDataFormatter::setKeyTypes(const QString &key_types) {
    this->key_types = key_types;
    this->m_key_types_isSet = true;
}

bool OAIDataFormatter::is_key_types_Set() const{
    return m_key_types_isSet;
}

bool OAIDataFormatter::is_key_types_Valid() const{
    return m_key_types_isValid;
}

QString OAIDataFormatter::getMagicHeader() const {
    return magic_header;
}
void OAIDataFormatter::setMagicHeader(const QString &magic_header) {
    this->magic_header = magic_header;
    this->m_magic_header_isSet = true;
}

bool OAIDataFormatter::is_magic_header_Set() const{
    return m_magic_header_isSet;
}

bool OAIDataFormatter::is_magic_header_Valid() const{
    return m_magic_header_isValid;
}

bool OAIDataFormatter::isReadOnly() const {
    return read_only;
}
void OAIDataFormatter::setReadOnly(const bool &read_only) {
    this->read_only = read_only;
    this->m_read_only_isSet = true;
}

bool OAIDataFormatter::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIDataFormatter::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAIDataFormatter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magic_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFormatter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace RespExtServer
